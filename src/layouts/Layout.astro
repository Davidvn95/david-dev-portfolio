---
import '@fontsource/fira-code';
import '@fontsource-variable/montserrat';
import Header from '../components/Header.astro';
interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang='es'>
  <head>
    <meta charset='UTF-8' />
    <meta
      name='description'
      content='Portafolio de David Vergara, desarrollador full stack con experiencia en JavaScript, React, Astro, Next, TailwindCSS, NodeJS, entre otras tecnologías relacionadas'
    />
    <meta name='viewport' content='width=device-width' />
    <link rel='icon' type='image/svg+xml' href='/favicon.svg' />
    <meta name='generator' content={Astro.generator} />
    <title>{title}</title>
    <meta property='og:title' content={title} />
    <meta
      property='og:description'
      content='Portafolio de David Vergara, desarrollador full stack con experiencia en JavaScript, React, Astro, Next, TailwindCSS, NodeJS, entre otras tecnologías relacionadas'
    />
    <meta property='og:site_name' content='David.dev' />
    <meta property='og:type' content='website' />
    <meta property='og:url' content='https://davidvergara.vercel.app/' />
    <meta property='og:image' content='/open-graph-image.webp' />
  </head>
  <body class='grid w-dvw max-w-screen-xl h-dvh bg-white text-[#3d3d3d] dark:bg-[#1e1e1e] px-3 md:px-6 pb-5 dark:text-[#cfcfcf] text-pretty m-auto'>
    <Header />
    <main class='grid gap-14 w-full'>
      <slot />
    </main>
  </body>
</html>
<style is:global>
  html {
    font-family: 'Montserrat Variable', sans-serif;
    scroll-behavior: smooth;
  }

  #footer,
  .logo {
    /* font-family: 'Fira Code', sans-serif; */
    font-family: 'Montserrat Variable', sans-serif;
  }

  h2 {
    font-size: 40px;
    line-height: 36px;
    font-weight: 700;
  }

  h3 {
    font-size: 20px;
  }
</style>

<script is:inline>
  const theme = (() => {
    // Primero verificamos si hay una preferencia guardada en la sesión actual
    if (typeof sessionStorage !== 'undefined' && sessionStorage.getItem('theme')) {
      return sessionStorage.getItem('theme');
    }
    // Si no hay preferencia en la sesión, usamos la preferencia del sistema
    else if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
      return 'dark';
    } else {
      return 'light';
    }
  })();

  const lightButton = document.getElementById('theme-light');
  const darkButton = document.getElementById('theme-dark');

  if (theme === 'light') {
    if (!darkButton.hasAttribute('hidden')) {
      darkButton.toggleAttribute('hidden');
      lightButton.toggleAttribute('hidden');
    }
    document.documentElement.classList.remove('dark');
  } else {
    if (!lightButton.hasAttribute('hidden')) {
      darkButton.toggleAttribute('hidden');
      lightButton.toggleAttribute('hidden');
    }
    document.documentElement.classList.add('dark');
  }
  sessionStorage.setItem('theme', theme);

  // Evento Click al botón theme
  darkButton.addEventListener('click', () => {
    if (sessionStorage.getItem('theme') === 'dark') {
      document.documentElement.classList.remove('dark');
      sessionStorage.setItem('theme', 'light');
      darkButton.toggleAttribute('hidden');
      lightButton.toggleAttribute('hidden');
    }
  });
  lightButton.addEventListener('click', () => {
    if (sessionStorage.getItem('theme') !== 'dark') {
      document.documentElement.classList.add('dark');
      sessionStorage.setItem('theme', 'dark');
      darkButton.toggleAttribute('hidden');
      lightButton.toggleAttribute('hidden');
    }
  });

  // Escuchamos cambios en la preferencia del sistema solo si no hay elección manual
  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
    // Solo actualizamos según el sistema si el usuario no ha hecho una elección manual
    if (!sessionStorage.getItem('theme')) {
      const newTheme = e.matches ? 'dark' : 'light';

      if (newTheme === 'light') {
        document.documentElement.classList.remove('dark');
        darkButton.toggleAttribute('hidden');
        lightButton.toggleAttribute('hidden');
      } else {
        document.documentElement.classList.add('dark');
        darkButton.toggleAttribute('hidden');
        lightButton.toggleAttribute('hidden');
      }
    }
  });
</script>
